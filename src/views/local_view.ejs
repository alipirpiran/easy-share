<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Local View</title>

    <link rel="stylesheet" href="/bs/css/bootstrap.min.css">

    <script src="https://code.jquery.com/jquery-1.11.1.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <script>
        const socket = io();
        socket.on('file', (file_info) => {
            const { file_name, file_size, file_id } = file_info
            const files = document.getElementById('files')
            const card = create_card(file_name, file_size, file_id)
            files.innerHTML = card + files.innerHTML
            file_info.progress = 1
            set_progress(file_info)
        })
        socket.on('progress', set_progress)


        function set_progress(info) {
            const { progress, file_id, file_name, speed, file_size } = info;

            let progress_elem = document.getElementById("progress_" + file_id)

            if (!progress_elem) {
                document.getElementById('queue').innerHTML += `
                <div id = "progress_${file_id}"></div>
                `

                progress_elem = document.getElementById("progress_" + file_id)
            }
            progress_elem.innerHTML = `
                    <h3>${file_name} </h3>
                    <h5> ${speed ? formatBytes(speed) + '/s' : 'Finished'}, Size: ${formatBytes(file_size)} </h5>
                    <div class="progress">
                    <div class="progress-bar" style="width:${Math.floor(progress * 100)}%"></div>
                    </div>`


        }
        function formatBytes(bytes, decimals) {
            if (bytes == 0) return '0 Bytes';
            var k = 1024,
                dm = decimals || 2,
                sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
                i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
        }

        function save(name) {
            socket.emit("save", name)
        }


        function create_card(name, size, id) {
            return `<div class="card m-3 " style="width: 18rem;box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);">
            <div class="card-body">
              <h5 class="card-title">${name}</h5>
              <p class="card-text" id = "size_${id}">Size: ${formatBytes(size)}</p>
              <a href="/dl?name=${name}" class="btn btn-primary" onclick="save('${name}')" target="_blank" name="${name}" >Save</a>
            </div>
          </div>`
        }

    </script>
</head>

<body>
    <div class="jumbotron  text-dark p-3 border">
        <div class="card mx-auto d-block" style="width:290px">
            <img class="card-img-top pl-4 pr-4 pt-3" src="data:image/png;base64, <%= data.qrcode %>" alt="Card image">
            <div class="card-body">
                <h4 class="card-title text-center pb-4 font-weight-light ">
                    <%= data.url %>
                </h4>
            </div>
        </div>
    </div>

    <div class="container col-md-6 mt-5 mb-5" id="queue"></div>
    <div class="container">
        <div class="row" id="files"></div>
    </div>



    <script src="/bs/js/bootstrap.min.js"></script>
</body>

</html>